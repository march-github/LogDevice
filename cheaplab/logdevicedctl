#!/bin/bash
set -uo pipefail

declare -r PORT_LD_CLIENT=16001
declare -r PORT_LD_ADMIN=16004
declare -r ZK=zookeeper/logdevice   # name of Zookeeper cluster to use
declare -r PIDFILE=/run/logdeviced.pid

declare -r timeout=${2-60}
declare -r deadline=$(($(date +%s)+$timeout))

for inc in this config; do
    source ${LAB_MODULES_ROOT?}/cheaplib/current/$inc.sh || exit 1
done


# Output a Zookeeper URL zk://<ip:port>{,<ip:port>} containing the
# list of internal ip addresses of all EC2 instances in the specified
# (Zookeeper) cluster. <port> is the 'port:' setting in the cluster
# config file on the node.  Default is 2181. ZK clients can use this
# URL to contact the Zookeeper ensemble. If the cluster does not exist
# or is empty, output an empty string. On error return a non-zero status.
#
# @param  $1   cluster   cluster id of Zookeeper cluster
# @param  $2   region    (optional) region to query for $cluster. If not set,
#                        the local region will be used.
zookeeper_url() {
    declare -r cluster=$1
    local region=${2-}

    [[ -n $region ]] || region=$(LAB-this_region) || return

    local port
    port=$(LAB-get_cluster_attribute $cluster "port" 2181)
    if [[ $? -ne 0 ]]; then
	>&2 echo "ERROR: failed to get Zookeeper port number for"\
	    "cluster $cluster"
	return 1
    fi

    local ips
    ips=$(aws ec2 describe-instances                                       \
	--filters "Name=tag:cheaplab-cluster,Values=$cluster"              \
     'Name=instance-state-name,Values=running,starting,stopping,stopped'   \
	--query "Reservations[].Instances[].[PrivateIpAddress]"            \
	--region $region                                                   \
	--output text) || return 1

    [[ $ips ]] || return 0

    echo -n "zk:"

    local ip
    local sep=
    for ip in $ips; do
	echo -n ${sep}$ip:$port
	sep=,
    done
}


case "${1-}" in
   start)
     for v in LAB_MODULES_ROOT LAB_DATADIR LAB_PORT_PROMETHEUS_SCRAPE LAB_ARGS;
     do
	 if [[ -z ${!v+_} ]]; then
	     >&2 echo "ABORT: $v is not set in the environment."\
		 "It was expected to be set by CheapLab."
	     exit 1
	 fi
     done
     if nc -z localhost $PORT_LD_ADMIN; then
       >&2 echo "ERROR: LogDevice admin port $PORT_LD_ADMIN is in use"
       exit 1
     fi

     CURRENT_MODULE=$LAB_MODULES_ROOT/logdeviced/current
     if [[ ! -h $CURRENT_MODULE ]]; then
       >&2 echo "ERROR: $CURRENT_MODULE does not exist or not a symlink"
       exit 1
     fi
     cd $CURRENT_MODULE 2>/dev/null
     if [[ $? -ne 0 ]]; then
       >&2 echo "ERROR: failed to cd to current package directory"\
                $(readlink -m $CURRENT_MODULE)
       exit 1
     fi
     if [[ ! -x bin/logdeviced ]]; then
       >&2 echo "ERROR: $CURRENT_MODULE/bin/logdeviced not found"\
                "or not executable"
       exit 1
     fi

     region=$(LAB-this_region) || exit

     zk=$(zookeeper_url $ZK $region) || exit
     if [[ -z $zk ]]; then
	 >&2 echo "No nodes found for Zookeeper cluster $ZK"
	 exit 1
     fi

     cluster=$(LAB-this_cluster_id $region)
     if [[ $? -ne 0 ]]; then
	 >&2 echo "ERROR: failed to get cluster id"
	 exit 1
     elif [[ $cluster =~ ^logdevice/([[:alnum:]_]+)$ ]]; then
	 cluster_name=${BASH_REMATCH[1]}
	 # fall through
     else
	 >&2 echo "ERROR: invalid cluster name '$cluster'."\
	     "Expected logdevice/[[:alnum:]_]+"
	 exit 1
     fi

     ulimit -Sc unlimited
     LD_LOAD_PLUGINS=lib/libldprometheus.so bin/logdeviced             \
          --config-path  ${zk}/conf/logdevice/${cluster_name}.conf     \
          --port $PORT_LD_CLIENT                                       \
          --admin-port $PORT_LD_ADMIN                                  \
          --prometheus-listen-addr 0.0.0.0:$LAB_PORT_PROMETHEUS_SCRAPE \
          --local-log-store-path=$LAB_DATADIR/                         \
	  $LAB_ARGS &
     logdeviced_pid=$!

     while [[ $(date +%s) -le $deadline ]]; do
       if lsof -p $logdeviced_pid -i6tcp:$PORT_LD_ADMIN -a -sTCP:LISTEN \
		 >/dev/null; then
	 # Our logdeviced has been able to bind the admin port
	 # Consider this a successful initialization.
	 echo $logdeviced_pid > $PIDFILE
         exit 0
       fi
       kill -0 $logdeviced_pid 2>/dev/null || exit 1
       sleep 2
     done
     exit 1
     ;;

   stop)
     if [[ -r $PIDFILE ]]; then
       logdeviced_pid=$(cat $PIDFILE)
       if kill -TERM $logdeviced_pid; then
         while [[ $(date +%s) -le $deadline ]] && \
		   nc -z localhost $PORT_LD_ADMIN; do
           sleep 2
	 done
       else
	 echo "process $logdeviced_pid in $PIDFILE does not exist"
       fi
     else
       echo "$PIDFILE not found or not readable"
     fi
     ;;

   "") echo "Usage: logdevicedctl start|stop [timeout_seconds]"
     ;;

   *) >&2 echo "ERROR: Invalid command: $1" ; exit 1
     ;;
esac
