#!/bin/bash
set -uo pipefail

declare -r PORT_LD_CLIENT=16001
declare -r PORT_LD_COMMAND=16005
declare -r ZKCLTPORT=2181
declare -r ZK=zookeeper/shared   # name of Zookeeper cluster to use

declare -r timeout=${2-60}
declare -r deadline=$(($(date +%s)+$timeout))


get_this_instance_id() {
    curl -sS -m 10 http://169.254.169.254/latest/meta-data/instance-id
}

get_this_instance_az() {
    curl -sS -m 10 \
	 http://169.254.169.254/latest/meta-data/placement/availability-zone
}

# Output the list of internal ip addresses of all running or
# starting EC2 instances with tag cheaplab-zk. If at least $MINZKUP
# such instances are found, output a Zookeeper URL of the form
# zk://<ip:port>{,<ip:port>} that ZK clients can user to contact the
# Zookeeper ensemble. Otherwise log an error to stderr and return failure.
#
# @param  $1   region    name of AWS region where Zookeeper ensemble is
#                        running (cross-region ensembles are not supported
#                        yet)
get_zookeeper_url() {
    declare -r region=$1
    declare -r MINZKUP=2  # minimum required number of running or starting
                          # Zookeeper instances
    local -a zkips

    zkips=( $(aws ec2 describe-instances                                     \
	--filters 'Name=tag-key,Values=cheaplab-zk'                          \
	          'Name=instance-state-name,Values=running,starting'         \
	--query "Reservations[].Instances[].[PrivateIpAddress]"              \
	--region $region                                                     \
	--output text) ) || return

    if [[ ${#zkips[@]} -lt $MINZKUP ]]; then
	>&2 echo "Too few Zookeeper EC2 instances in state 'running' or"\
	    "'starting'. Expected $MINZKUP instances, got ${zkips[*]}"
	return 1
    fi

    echo -n "zk:"

    local ip
    local sep=
    for ip in ${zkips[@]}; do
	echo -n ${sep}$ip:$ZKCLTPORT
	sep=,
    done
}


# Output the value of 'cheaplab-cluster' tag of this instance, if such a
# tag exists.
#
# @param  $1   region    name of AWS region where Zookeeper is running
get_this_cluster_id() {
    declare -r region=$1
    local iid

    iid=$(get_this_instance_id)
    if [[ $? -ne 0 || -z $iid ]]; then
	>&2 echo "ERROR: failed to get this instance id from EC2"
	exit 1
    fi

    aws ec2 describe-instances \
	--instance-ids=$iid    \
	--region $region       \
	--query                \
 "Reservations[].Instances[].Tags[?contains(['cheaplab-cluster'],Key)].Value"\
	--output text
}


case "${1-}" in
   start)
     for v in LAB_PACKAGES_ROOT LAB_DATADIR LAB_PORT_PROMETHEUS_SCRAPE\
				  LAB_CLUSTER LAB_ARGS; do
	 if [[ -z ${!v+_} ]]; then
	     >&2 echo "ABORT: $v is not set in the environment."\
		 "It was expected to be set by CheapLab."
	     exit 1
	 fi
     done
     if nc -z localhost $PORT_LD_COMMAND; then
       >&2 echo "ERROR: LogDevice command port $PORT_LD_COMMAND is in use"
       exit 1
     fi

     CURRENT_PACKAGE=$LAB_PACKAGES_ROOT/logdevice/current
     if [[ ! -h $CURRENT_PACKAGE ]]; then
       >&2 echo "ERROR: $CURRENT_PACKAGE does not exist or not a symlink"
       exit 1
     fi
     cd $CURRENT_PACKAGE 2>/dev/null
     if [[ $? -ne 0 ]]; then
       >&2 echo "ERROR: failed to cd to current package directory"\
                $(readlink -m $CURRENT_PACKAGE)
       exit 1
     fi
     if [[ ! -x bin/logdeviced ]]; then
       >&2 echo "ERROR: $CURRENT_PACKAGE/bin/logdeviced not found"\
                "or not executable"
       exit 1
     fi

     az=$(get_this_instance_az)
     if [[ $? -ne 0 || -z $az ]]; then
	 >&2 echo "ERROR: failed to get availability zone from EC2"
	 exit 1
     fi
     region=${az:0:-1}  # drop last char
     zk=$(get_zookeeper_url $region) || exit

     cluster=$(get_this_cluster_id $region)
     if [[ $? -ne 0 ]]; then
	 >&2 echo "ERROR: failed to get cluster id"
	 exit 1
     elif [[ -z $cluster ]]; then
	 >&2 echo "ERROR: could not determine cluster id because "\
	     "cheaplab-cluster tag is missing or empty on this instance."
	 exit 1
     elif [[ $cluster =~ ^logdevice/([[:alnum:]_]+)$ ]]; then
	 cluster_name=${BASH_REMATCH[1]}
         if [[ $cluster != $LAB_CLUSTER ]]; then
	     >&2 echo "ABORT: cheaplab-cluster tag '$cluster' does not"\
	     "match LAB_CLUSTER value '$LAB_CLUSTER' set in the environment."
	     exit 1
	 fi
	 # fall through
     else
	 >&2 echo "ERROR: unexpected cluster name $cluster."\
	     "Expected logdevice/[[:alnum:]_]+"
	 exit 1
     fi

     ulimit -Sc unlimited
     LD_LOAD_PLUGINS=lib/libldprometheus.so bin/logdeviced             \
          --config-path  ${zk}/conf/logdevice/${cluster_name}.conf     \
          --port $PORT_LD_CLIENT                                       \
          --command-port $PORT_LD_COMMAND                              \
          --prometheus-listen-addr 0.0.0.0:$LAB_PORT_PROMETHEUS_SCRAPE \
          --local-log-store-path=$LAB_DATADIR/                         \
	  $LAB_ARGS &
     logdeviced_pid=$!

     echo $logdeviced_pid > /run/logdeviced.pid
     while [[ $(date +%s) -le $deadline ]]; do
       running=$(echo info | nc -N -w 10 localhost $PORT_LD_COMMAND |\
                                                               grep '^PID')
       if [[ $? -eq 0 ]]; then
         if echo "$running" | grep -q $logdeviced_pid; then
           exit 0
         else
           >&2 echo "ERROR: another logdeviced instance is already running"
           exit 1
         fi
       fi
       kill -0 $logdeviced_pid 2>/dev/null || exit 1
       sleep 2
     done
     exit 1
     ;;

   stop)
     if echo quit | nc -N -w 10 localhost $PORT_LD_COMMAND; then
       while [[ $(date +%s) -le $deadline ]] && \
             nc -z localhost $PORT_LD_COMMAND; do
         sleep 5
       done
     fi
     exit 0
     ;;

   "") echo "Usage: logdevicedctl start|stop [timeout_seconds]"
     ;;

   *) >&2 echo "ERROR: Invalid command: $1" ; exit 1
     ;;
esac
